// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: identity_verification_request.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIdentityVerificationRequest = `-- name: CreateIdentityVerificationRequest :exec
INSERT INTO
	"IdentityVerificationRequest" ("userId", "nricName", nric, dob, "nricFront", "nricBack", "holderFace", status, "updatedAt")
VALUES
	($1, $2, $3, $4, '', '', '', 'INCOMPLETE', now())
RETURNING
	id, "userId", "modifiedById", status, remarks, "nricFront", "nricBack", "holderFace", "nricName", nric, "createdAt", "updatedAt", dob
`

type CreateIdentityVerificationRequestParams struct {
	UserId   pgtype.UUID `json:"userId"`
	NricName string      `json:"nricName"`
	Nric     string      `json:"nric"`
	Dob      pgtype.Date `json:"dob"`
}

func (q *Queries) CreateIdentityVerificationRequest(ctx context.Context, arg CreateIdentityVerificationRequestParams) error {
	_, err := q.db.Exec(ctx, createIdentityVerificationRequest,
		arg.UserId,
		arg.NricName,
		arg.Nric,
		arg.Dob,
	)
	return err
}

const getLatestIdentityVerificationRequestByUserId = `-- name: GetLatestIdentityVerificationRequestByUserId :one
SELECT id, "userId", "modifiedById", status, remarks, "nricFront", "nricBack", "holderFace", "nricName", nric, "createdAt", "updatedAt", dob FROM "IdentityVerificationRequest" WHERE "userId" = $1 AND status <> 'REJECTED' ORDER BY "createdAt" DESC LIMIT 1
`

func (q *Queries) GetLatestIdentityVerificationRequestByUserId(ctx context.Context, userid pgtype.UUID) (IdentityVerificationRequest, error) {
	row := q.db.QueryRow(ctx, getLatestIdentityVerificationRequestByUserId, userid)
	var i IdentityVerificationRequest
	err := row.Scan(
		&i.ID,
		&i.UserId,
		&i.ModifiedById,
		&i.Status,
		&i.Remarks,
		&i.NricFront,
		&i.NricBack,
		&i.HolderFace,
		&i.NricName,
		&i.Nric,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Dob,
	)
	return i, err
}

const updateIdentityVerificationRequestById = `-- name: UpdateIdentityVerificationRequestById :exec
UPDATE
	"IdentityVerificationRequest"
SET
	"nricName" = COALESCE($2, "nricName"),
	nric = COALESCE($3, nric),
	dob = COALESCE($4, dob),
	"nricFront" = COALESCE($5, "nricFront"),
	"nricBack" = COALESCE($6, "nricBack"),
	"holderFace" = COALESCE($7, "holderFace"),
	status = COALESCE($8, status),
	"updatedAt" = now()
WHERE
	id = $1
`

type UpdateIdentityVerificationRequestByIdParams struct {
	ID         int32                          `json:"id"`
	NricName   pgtype.Text                    `json:"nricName"`
	Nric       pgtype.Text                    `json:"nric"`
	Dob        pgtype.Date                    `json:"dob"`
	NricFront  pgtype.Text                    `json:"nricFront"`
	NricBack   pgtype.Text                    `json:"nricBack"`
	HolderFace pgtype.Text                    `json:"holderFace"`
	Status     NullIdentityVerificationStatus `json:"status"`
}

func (q *Queries) UpdateIdentityVerificationRequestById(ctx context.Context, arg UpdateIdentityVerificationRequestByIdParams) error {
	_, err := q.db.Exec(ctx, updateIdentityVerificationRequestById,
		arg.ID,
		arg.NricName,
		arg.Nric,
		arg.Dob,
		arg.NricFront,
		arg.NricBack,
		arg.HolderFace,
		arg.Status,
	)
	return err
}
