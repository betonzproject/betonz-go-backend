// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: verification_pin.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteVerificationPin = `-- name: DeleteVerificationPin :exec
DELETE FROM "VerificationPin"
WHERE
	"pin" = $1
`

func (q *Queries) DeleteVerificationPin(ctx context.Context, pin string) error {
	_, err := q.db.Exec(ctx, deleteVerificationPin, pin)
	return err
}

const getVerificationPinByPin = `-- name: GetVerificationPinByPin :one
SELECT
	prt.pin, prt."userId", prt."createdAt", prt."updatedAt",
	u.username,
	u.email
FROM
	"VerificationPin" prt
	JOIN "User" u ON prt."userId" = u.id
WHERE
	"pin" = $1
`

type GetVerificationPinByPinRow struct {
	Pin       string             `json:"pin"`
	UserId    pgtype.UUID        `json:"userId"`
	CreatedAt pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt pgtype.Timestamptz `json:"updatedAt"`
	Username  string             `json:"username"`
	Email     string             `json:"email"`
}

func (q *Queries) GetVerificationPinByPin(ctx context.Context, pin string) (GetVerificationPinByPinRow, error) {
	row := q.db.QueryRow(ctx, getVerificationPinByPin, pin)
	var i GetVerificationPinByPinRow
	err := row.Scan(
		&i.Pin,
		&i.UserId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
	)
	return i, err
}

const getVerificationPinByUserId = `-- name: GetVerificationPinByUserId :one
SELECT
	prt.pin, prt."userId", prt."createdAt", prt."updatedAt"
FROM
	"VerificationPin" prt
	JOIN "User" u ON prt."userId" = u.id
WHERE
	"userId" = $1
`

func (q *Queries) GetVerificationPinByUserId(ctx context.Context, userid pgtype.UUID) (VerificationPin, error) {
	row := q.db.QueryRow(ctx, getVerificationPinByUserId, userid)
	var i VerificationPin
	err := row.Scan(
		&i.Pin,
		&i.UserId,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertVerificationPin = `-- name: UpsertVerificationPin :exec
INSERT INTO
	"VerificationPin" AS prt ("pin", "userId", "updatedAt")
VALUES
	($1, $2, now())
ON CONFLICT ("userId") DO
UPDATE
SET
	"pin" = excluded."pin",
	"createdAt" = now(),
	"updatedAt" = now()
`

type UpsertVerificationPinParams struct {
	Pin    string      `json:"pin"`
	UserId pgtype.UUID `json:"userId"`
}

func (q *Queries) UpsertVerificationPin(ctx context.Context, arg UpsertVerificationPinParams) error {
	_, err := q.db.Exec(ctx, upsertVerificationPin, arg.Pin, arg.UserId)
	return err
}
