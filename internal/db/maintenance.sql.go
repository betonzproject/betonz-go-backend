// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: maintenance.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMaintenanceItem = `-- name: CreateMaintenanceItem :exec
INSERT INTO
	"Maintenance" ("productCode", "maintenancePeriod", "gmtOffsetSecs", "updatedAt")
VALUES
	($1, $2, $3, now())
`

type CreateMaintenanceItemParams struct {
	ProductCode       int32                            `json:"productCode"`
	MaintenancePeriod pgtype.Range[pgtype.Timestamptz] `json:"maintenancePeriod"`
	GmtOffsetSecs     int32                            `json:"gmtOffsetSecs"`
}

func (q *Queries) CreateMaintenanceItem(ctx context.Context, arg CreateMaintenanceItemParams) error {
	_, err := q.db.Exec(ctx, createMaintenanceItem, arg.ProductCode, arg.MaintenancePeriod, arg.GmtOffsetSecs)
	return err
}

const deleteMaintenanceItem = `-- name: DeleteMaintenanceItem :exec
DELETE FROM "Maintenance"
WHERE
	id = $1
`

func (q *Queries) DeleteMaintenanceItem(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteMaintenanceItem, id)
	return err
}

const getMaintenanceList = `-- name: GetMaintenanceList :many
SELECT
	id, "productCode", "maintenancePeriod", "gmtOffsetSecs", "createdAt", "updatedAt"
FROM
	"Maintenance"
WHERE
	("maintenancePeriod").upper >= CURRENT_TIMESTAMP - interval '1 month'
ORDER BY
	("maintenancePeriod").upper DESC
`

func (q *Queries) GetMaintenanceList(ctx context.Context) ([]Maintenance, error) {
	rows, err := q.db.Query(ctx, getMaintenanceList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Maintenance{}
	for rows.Next() {
		var i Maintenance
		if err := rows.Scan(
			&i.ID,
			&i.ProductCode,
			&i.MaintenancePeriod,
			&i.GmtOffsetSecs,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMaintenanceProductCodes = `-- name: GetMaintenanceProductCodes :many
SELECT
	"productCode"
FROM
	"Maintenance"
WHERE
	now() <@ "maintenancePeriod"
`

func (q *Queries) GetMaintenanceProductCodes(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, getMaintenanceProductCodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var productCode int32
		if err := rows.Scan(&productCode); err != nil {
			return nil, err
		}
		items = append(items, productCode)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMaintenanceItem = `-- name: UpdateMaintenanceItem :exec
UPDATE "Maintenance"
SET
	"maintenancePeriod" = $2,
	"gmtOffsetSecs" = $3,
	"updatedAt" = now()
WHERE
	id = $1
`

type UpdateMaintenanceItemParams struct {
	ID                int32                            `json:"id"`
	MaintenancePeriod pgtype.Range[pgtype.Timestamptz] `json:"maintenancePeriod"`
	GmtOffsetSecs     int32                            `json:"gmtOffsetSecs"`
}

func (q *Queries) UpdateMaintenanceItem(ctx context.Context, arg UpdateMaintenanceItemParams) error {
	_, err := q.db.Exec(ctx, updateMaintenanceItem, arg.ID, arg.MaintenancePeriod, arg.GmtOffsetSecs)
	return err
}
