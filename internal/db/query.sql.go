// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getExtendedAdminByUsername = `-- name: GetExtendedAdminByUsername :one
SELECT id, username, email, "passwordHash", "displayName", "phoneNumber", "createdAt", "updatedAt", "etgUsername", role, "mainWallet", "lastUsedBankId", "profileImage", status, "lastLoginIp", "isEmailVerified", dob FROM betonz."User" WHERE username = $1 AND role IN ('ADMIN'::betonz."Role", 'SUPERADMIN'::betonz."Role")
`

func (q *Queries) GetExtendedAdminByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getExtendedAdminByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EtgUsername,
		&i.Role,
		&i.MainWallet,
		&i.LastUsedBankId,
		&i.ProfileImage,
		&i.Status,
		&i.LastLoginIp,
		&i.IsEmailVerified,
		&i.Dob,
	)
	return i, err
}

const getExtendedPlayerByUsername = `-- name: GetExtendedPlayerByUsername :one
SELECT id, username, email, "passwordHash", "displayName", "phoneNumber", "createdAt", "updatedAt", "etgUsername", role, "mainWallet", "lastUsedBankId", "profileImage", status, "lastLoginIp", "isEmailVerified", dob FROM betonz."User" WHERE username = $1 AND role = 'PLAYER'::betonz."Role"
`

func (q *Queries) GetExtendedPlayerByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getExtendedPlayerByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EtgUsername,
		&i.Role,
		&i.MainWallet,
		&i.LastUsedBankId,
		&i.ProfileImage,
		&i.Status,
		&i.LastLoginIp,
		&i.IsEmailVerified,
		&i.Dob,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, role, email, "displayName", "phoneNumber", "mainWallet", dob, "profileImage", "isEmailVerified" FROM betonz."User" WHERE id = $1
`

type GetUserByIdRow struct {
	ID              pgtype.UUID    `json:"id"`
	Username        string         `json:"username"`
	Role            Role           `json:"role"`
	Email           string         `json:"email"`
	DisplayName     pgtype.Text    `json:"displayName"`
	PhoneNumber     pgtype.Text    `json:"phoneNumber"`
	MainWallet      pgtype.Numeric `json:"mainWallet"`
	Dob             pgtype.Date    `json:"dob"`
	ProfileImage    pgtype.Text    `json:"profileImage"`
	IsEmailVerified bool           `json:"isEmailVerified"`
}

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.Email,
		&i.DisplayName,
		&i.PhoneNumber,
		&i.MainWallet,
		&i.Dob,
		&i.ProfileImage,
		&i.IsEmailVerified,
	)
	return i, err
}
