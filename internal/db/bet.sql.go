// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: bet.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getTurnoverByUserId = `-- name: GetTurnoverByUserId :many
SELECT
	b."productCode", sum(b.turnover) AS turnover
FROM
	"Bet" b
JOIN
	"User" u USING ("etgUsername")
WHERE 
	u.id = $1 AND b."startTime" >= $2 AND b."startTime" < $3
GROUP BY
	b."productCode"
`

type GetTurnoverByUserIdParams struct {
	ID       pgtype.UUID        `json:"id"`
	FromDate pgtype.Timestamptz `json:"fromDate"`
	ToDate   pgtype.Timestamptz `json:"toDate"`
}

type GetTurnoverByUserIdRow struct {
	ProductCode int32 `json:"productCode"`
	Turnover    int64 `json:"turnover"`
}

func (q *Queries) GetTurnoverByUserId(ctx context.Context, arg GetTurnoverByUserIdParams) ([]GetTurnoverByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getTurnoverByUserId, arg.ID, arg.FromDate, arg.ToDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTurnoverByUserIdRow
	for rows.Next() {
		var i GetTurnoverByUserIdRow
		if err := rows.Scan(&i.ProductCode, &i.Turnover); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
