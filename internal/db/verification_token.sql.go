// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: verification_token.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteVerificationTokenByHash = `-- name: DeleteVerificationTokenByHash :exec
DELETE FROM "VerificationToken" WHERE "tokenHash" = $1
`

func (q *Queries) DeleteVerificationTokenByHash(ctx context.Context, tokenhash string) error {
	_, err := q.db.Exec(ctx, deleteVerificationTokenByHash, tokenhash)
	return err
}

const getVerificationTokenByHash = `-- name: GetVerificationTokenByHash :one
SELECT
	vt."tokenHash", vt."userId", vt."createdAt", vt."updatedAt", vt."registerInfo",
	u.username,
	u.email,
	u."pendingEmail"
FROM
	"VerificationToken" vt
	LEFT JOIN "User" u ON vt."userId" = u.id
WHERE
	"tokenHash" = $1
`

type GetVerificationTokenByHashRow struct {
	TokenHash    string             `json:"tokenHash"`
	UserId       pgtype.UUID        `json:"userId"`
	CreatedAt    pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt    pgtype.Timestamptz `json:"updatedAt"`
	RegisterInfo *RegisterInfo      `json:"registerInfo"`
	Username     pgtype.Text        `json:"username"`
	Email        pgtype.Text        `json:"email"`
	PendingEmail pgtype.Text        `json:"pendingEmail"`
}

func (q *Queries) GetVerificationTokenByHash(ctx context.Context, tokenhash string) (GetVerificationTokenByHashRow, error) {
	row := q.db.QueryRow(ctx, getVerificationTokenByHash, tokenhash)
	var i GetVerificationTokenByHashRow
	err := row.Scan(
		&i.TokenHash,
		&i.UserId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RegisterInfo,
		&i.Username,
		&i.Email,
		&i.PendingEmail,
	)
	return i, err
}

const upsertVerificationToken = `-- name: UpsertVerificationToken :exec
INSERT INTO
	"VerificationToken" ("tokenHash", "userId", "registerInfo", "updatedAt")
VALUES
	($1, $2, $3, now())
ON CONFLICT ("userId") DO
UPDATE
SET
	"tokenHash" = excluded."tokenHash",
	"registerInfo" = excluded."registerInfo",
	"createdAt" = now(),
	"updatedAt" = now()
`

type UpsertVerificationTokenParams struct {
	TokenHash    string        `json:"tokenHash"`
	UserId       pgtype.UUID   `json:"userId"`
	RegisterInfo *RegisterInfo `json:"registerInfo"`
}

func (q *Queries) UpsertVerificationToken(ctx context.Context, arg UpsertVerificationTokenParams) error {
	_, err := q.db.Exec(ctx, upsertVerificationToken, arg.TokenHash, arg.UserId, arg.RegisterInfo)
	return err
}
