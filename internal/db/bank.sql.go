// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: bank.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSystemBank = `-- name: CreateSystemBank :exec
INSERT INTO "Bank" ("id", "userId", "name", "accountName", "accountNumber", "updatedAt")
SELECT gen_random_uuid(), id, $1, $2, $3, now() FROM "User" WHERE role = 'SYSTEM'::"Role" LIMIT 1
`

type CreateSystemBankParams struct {
	Name          BankName `json:"name"`
	AccountName   string   `json:"accountName"`
	AccountNumber string   `json:"accountNumber"`
}

func (q *Queries) CreateSystemBank(ctx context.Context, arg CreateSystemBankParams) error {
	_, err := q.db.Exec(ctx, createSystemBank, arg.Name, arg.AccountName, arg.AccountNumber)
	return err
}

const deleteSystemBankById = `-- name: DeleteSystemBankById :exec
DELETE FROM "Bank" b USING "User" u WHERE b."userId" = u.id AND b.id = $1 AND u.role = 'SYSTEM'::"Role"
`

func (q *Queries) DeleteSystemBankById(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSystemBankById, id)
	return err
}

const getSystemBanks = `-- name: GetSystemBanks :many
SELECT
	b.id, b.name, b."accountName", b."accountNumber", b.disabled
FROM
	"Bank" b
JOIN "User" u ON
	b."userId" = u.id
WHERE
	u.ROLE = 'SYSTEM'::"Role"
ORDER BY
	b."createdAt", b."accountName"
`

type GetSystemBanksRow struct {
	ID            pgtype.UUID `json:"id"`
	Name          BankName    `json:"name"`
	AccountName   string      `json:"accountName"`
	AccountNumber string      `json:"accountNumber"`
	Disabled      bool        `json:"disabled"`
}

func (q *Queries) GetSystemBanks(ctx context.Context) ([]GetSystemBanksRow, error) {
	rows, err := q.db.Query(ctx, getSystemBanks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSystemBanksRow
	for rows.Next() {
		var i GetSystemBanksRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AccountName,
			&i.AccountNumber,
			&i.Disabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSystemBank = `-- name: UpdateSystemBank :exec
UPDATE
	"Bank"
SET
	"accountName" = COALESCE($2, "accountName"),
	"accountNumber" = COALESCE($3, "accountNumber"),
	disabled = $4,
	"updatedAt" = now()
WHERE
	id = $1
`

type UpdateSystemBankParams struct {
	ID            pgtype.UUID `json:"id"`
	AccountName   pgtype.Text `json:"accountName"`
	AccountNumber pgtype.Text `json:"accountNumber"`
	Disabled      bool        `json:"disabled"`
}

func (q *Queries) UpdateSystemBank(ctx context.Context, arg UpdateSystemBankParams) error {
	_, err := q.db.Exec(ctx, updateSystemBank,
		arg.ID,
		arg.AccountName,
		arg.AccountNumber,
		arg.Disabled,
	)
	return err
}
