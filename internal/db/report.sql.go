// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: report.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getDailyReport = `-- name: GetDailyReport :many
SELECT id, "depositAmount", "withdrawAmount", "depositCount", "withdrawCount", "withdrawBankFees", "bonusGiven", "createdAt", "activePlayerCount", "inactivePlayerCount", "winLoss" FROM "Report" WHERE "createdAt" >= $1 AND "createdAt" <= $2
`

type GetDailyReportParams struct {
	FromDate pgtype.Timestamptz `json:"fromDate"`
	ToDate   pgtype.Timestamptz `json:"toDate"`
}

func (q *Queries) GetDailyReport(ctx context.Context, arg GetDailyReportParams) ([]Report, error) {
	rows, err := q.db.Query(ctx, getDailyReport, arg.FromDate, arg.ToDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.ID,
			&i.DepositAmount,
			&i.WithdrawAmount,
			&i.DepositCount,
			&i.WithdrawCount,
			&i.WithdrawBankFees,
			&i.BonusGiven,
			&i.CreatedAt,
			&i.ActivePlayerCount,
			&i.InactivePlayerCount,
			&i.WinLoss,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
